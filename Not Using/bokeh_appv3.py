import pandas as pd
import numpy as np
from bokeh.plotting import figure, curdoc
from bokeh.models import ColumnDataSource, Select, HoverTool, Div
from bokeh.layouts import column, row
from bokeh.palettes import Category10
from bokeh.io import show

# --- 1. Load or Simulate Data ---
time_data = pd.date_range("2025-01-01", periods=100, freq="s")

# Simulated RTT and Throughput dataframes (replace with your actual data)
utf_rtt_df = pd.DataFrame({"Time": time_data, "SmoothedRTT": np.random.uniform(10, 50, 100)})
tfcubic_rtt_df = pd.DataFrame({"Time": time_data, "SmoothedRTT": np.random.uniform(15, 60, 100)})
baseline_rtt_df = pd.DataFrame({"Time": time_data, "SmoothedRTT": np.random.uniform(5, 10, 100)})

utf_thrpt_df = pd.DataFrame({"Time": time_data, "thrpt": np.random.uniform(40, 90, 100)})
tfcubic_thrpt_df = pd.DataFrame({"Time": time_data, "thrpt": np.random.uniform(30, 100, 100)})

# --- 2. Organize Data Paths ---
data_sets = {
    "RTT": {
        "Cubic": tfcubic_rtt_df,
        "UDP-Prague": utf_rtt_df,
        "Baseline Propagation Delay": baseline_rtt_df
    },
    "THRPT": {
        "Cubic": tfcubic_thrpt_df,
        "UDP-Prague": utf_thrpt_df,
    }
}

# --- 3. Create Plot ---
plot = figure(
    x_axis_type="datetime",
    height=400,
    width=700,
    title="Data Over Time", # Initial generic title, updated by callback
    x_axis_label="Time"
)

hover = HoverTool(tooltips=[("Time", "@Time{%F %T}"), ("Value", "@y")], formatters={"@Time": "datetime"})
plot.add_tools(hover)

# --- 4. Setup Dropdown and Dynamic Plotting ---
metric_select = Select(title="Select Metric", value="RTT", options=["RTT", "THRPT"])
current_renderers = [] # To keep track of plotted lines for removal

def update_plot(attr, old, new):
    global current_renderers

    # Clear existing lines from the plot
    for r in current_renderers:
        plot.renderers.remove(r)
    current_renderers.clear()

    selected_metric = metric_select.value
    data_for_metric = data_sets[selected_metric]

    # Determine column name and labels based on selected metric
    y_column = "SmoothedRTT" if selected_metric == "RTT" else "thrpt"
    y_label = "RTT (ms)" if selected_metric == "RTT" else "Throughput (Mbps)"
    plot_title = "Smoothed RTT Over Time" if selected_metric == "RTT" else "Throughput Over Time"

    plot.yaxis.axis_label = y_label
    plot.title.text = plot_title
    plot.legend.items = [] # Clear existing legend items

    color_cycle = iter(Category10[10])

    for name, df in data_for_metric.items():
        color = next(color_cycle)
        # Ensure 'Time' is datetime for Bokeh plotting
        source_data = {
            "Time": pd.to_datetime(df['Time']),
            "y": df[y_column]
        }
        src = ColumnDataSource(data=source_data)
        line = plot.line("Time", "y", source=src, line_width=2, color=color, legend_label=name)
        current_renderers.append(line)

    plot.legend.title = "Legend"
    plot.legend.location = "top_center"

# --- Initial Plot Load and Callback Link ---
update_plot(None, None, None) # Call once to draw the initial plot
metric_select.on_change("value", update_plot)

# --- Layout ---
# Use a Div to wrap the column layout for more precise centering control via CSS
# The Div will have a specific ID assigned by Bokeh when added to the document.
# We will inject CSS to center this Div.
app_layout = column(
    metric_select,
    plot,
    # Make sure your layout is appropriately sized, if you were to use sizing_mode
    # plot.sizing_mode = 'stretch_width' # Example: if you want plot to stretch
)

# --- Add to Document and inject CSS ---
# Get the current document
doc = curdoc()
doc.add_root(app_layout)
doc.title = "RTT and Throughput Comparison"

# Inject CSS to center the main Bokeh app container
# Bokeh automatically wraps the root layout in a div with an ID like 'bk-root-xyz'
# We target the direct child of the body that contains the Bokeh app.
# The `display: flex` and `justify-content` are the key.
doc.append_loaded_css("""
body {
    display: flex;
    justify-content: center; /* Center horizontally */
    align-items: center;    /* Center vertically */
    min-height: 100vh;      /* Ensure body takes full viewport height */
    margin: 0;              /* Remove default body margin */
    background-color: #f0f0f0; /* Optional: light background */
}

/* Target the direct child of the body that contains the Bokeh app.
   This will be the div generated by Bokeh for the root `app_layout`. */
body > div:first-child {
    display: flex; /* Make it a flex container */
    flex-direction: column; /* Stack items vertically */
    align-items: center; /* Center children (dropdown, plot) horizontally within this div */
    justify-content: center; /* Center children vertically if space allows */
    width: fit-content; /* Ensure the container only takes necessary width */
    height: fit-content; /* Ensure the container only takes necessary height */
}

/* You might want to adjust width/height of components for tighter fit */
.bk-root .bk-clearfix { /* Target Bokeh's default class for layout elements */
    align-items: center; /* Ensure contents of dropdown and plot are centered */
}

/* Optional: Add some padding to the main container if needed */
.bk-root > div {
    padding: 20px;
}
""")